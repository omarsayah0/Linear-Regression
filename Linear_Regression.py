#Hey everyone. This code contains many comments to help you understand its functionality.
#  You are encouraged to test the code and experiment to identify any potential errors.
#  However, the final version of the code runs efficiently without any mistakes, producing the desired output.
# This code is designed to predict building prices in Abdoun, Amman, Jordan.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error , r2_score
from sklearn.metrics import mean_absolute_error

#The data
#The price is not 100% accurate in the real world; it represents the median of the buildings in Abdoun.

build_area =[130,130,130,130,130,130,130,130,130,130,
    130,130,130,130,130,130,130,130,130,130,

  130,130,130,130,130,140,140,140,140,140,
  140,140,140,140,140,140,140,140,140,140,

  140,140,140,140,140,150,150,150,150,150,
  150,150,150,150,150,150,150,150,150,150,
 
  150,150,150,150,150,160,160,160,160,160,
  160,160,160,160,160,160,160,160,160,160,
  
  160,160,160,160,160,160,160,160,160,160,
  160,160,160,160,160,160,160,160,160,160,
  
  170,170,170,170,170,170,170,170,170,170,
  170,170,170,170,170,170,170,170,170,170,
  
  170,170,170,170,170,180,180,180,180,180,
  180,180,180,180,180,180,180,180,180,180,
  
  180,180,180,180,180,180,180,180,180,180,
  190,190,190,190,190,190,190,190,190,190,
  
  190,190,190,190,190,190,190,190,190,190,
  190,190,190,190,190,200,200,200,200,200,
  
  200,200,200,200,200,200,200,200,200,200,
  200,200,200,200,200,200,200,200,200,200,
  
  210,210,210,210,210,210,210,210,210,210,
  210,210,210,210,210,210,210,210,210,210,
  
  210,210,210,210,210,220,220,220,220,220,
  220,220,220,220,220,220,220,220,220,220,
  
  220,220,220,220,220,220,220,220,220,220,
  230,230,230,230,230,230,230,230,230,230,
  
  230,230,230,230,230,230,230,230,230,230,
  230,230,230,230,230,240,240,240,240,240,
  
  240,240,240,240,240,240,240,240,240,240,
  240,240,240,240,240,240,240,240,240,240,
  
  250,250,250,250,250,250,250,250,250,250,
  250,250,250,250,250,250,250,250,250,250,
  
  250,250,250,250,250,260,260,260,260,260,
  260,260,260,260,260,260,260,260,260,260,
  
  260,260,260,260,260,260,260,260,260,260,
  270,270,270,270,270,270,270,270,270,270,
  
  270,270,270,270,270,270,270,270,270,270,
  270,270,270,270,270,280,280,280,280,280,
  
  280,280,280,280,280,280,280,280,280,280,
  280,280,280,280,280,280,280,280,280,280,
  
  290,290,290,290,290,290,290,290,290,290,
  290,290,290,290,290,290,290,290,290,290,
  
  290,290,290,290,290,300,300,300,300,300,
  300,300,300,300,300,300,300,300,300,300,
  
  300,300,300,300,300,300,300,300,300,300,
  310,310,310,310,310,310,310,310,310,310,
  
  310,310,310,310,310,310,310,310,310,310,
  310,310,310,310,310,320,320,320,320,320,
  
  320,320,320,320,320,320,320,320,320,320,
  320,320,320,320,320,320,320,320,320,320]
build_age =[ 1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,
            
             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,

             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,

             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,

             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,

             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,

             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,

             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,

             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,

             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,

             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,

             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,

             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,

             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,

             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,

             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,

             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,

             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,

             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5,

             1,1,1,1,1, 2,2,2,2,2, 3,3,3,3,3, 4,4,4,4,4, 5,5,5,5,5]
build_room = [ 2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6,

  2,3,4,5,6,2,3,4,5,6,
  2,3,4,5,6,2,3,4,5,6]
build_price = [207000,212000,217000,222000,227000,209000,214000,219000,224000,229000,
  211000,216000,221000,226000,231000,213000,218000,223000,228000,233000,

  215000,220000,225000,230000,235000,222000,227000,232000,237000,242000,
  224000,229000,234000,239000,244000,226000,231000,236000,241000,246000,

  228000,233000,238000,243000,248000,230000,235000,240000,245000,250000,
  237000,242000,247000,252000,257000,239000,244000,249000,254000,259000,

  241000,246000,251000,256000,261000,243000,248000,253000,258000,263000,
  245000,250000,255000,260000,265000,252000,257000,262000,267000,272000,

  254000,259000,264000,269000,274000,256000,261000,266000,271000,276000,
  258000,263000,268000,273000,278000,260000,265000,270000,275000,280000,

  267000,272000,277000,282000,287000,269000,274000,279000,284000,289000,
  271000,276000,281000,286000,291000,273000,278000,283000,288000,293000,

  275000,280000,285000,290000,295000,282000,287000,292000,297000,302000,
  284000,289000,294000,299000,304000,286000,291000,296000,301000,306000,

  288000,293000,298000,303000,308000,290000,295000,300000,305000,310000,
  297000,302000,307000,312000,317000,299000,304000,309000,314000,319000,

  301000,306000,311000,316000,321000,303000,308000,313000,318000,323000,
  305000,310000,315000,320000,325000,312000,317000,322000,327000,332000,

  314000,319000,324000,329000,334000,316000,321000,326000,331000,336000,
  318000,323000,328000,333000,338000,320000,325000,330000,335000,340000,

  327000,332000,337000,342000,347000,329000,334000,339000,344000,349000,
  331000,336000,341000,346000,351000,333000,338000,343000,348000,353000,

  335000,340000,345000,350000,355000,342000,347000,352000,357000,362000,
  344000,349000,354000,359000,364000,346000,351000,356000,361000,366000,

  348000,353000,358000,363000,368000,350000,355000,360000,365000,370000,
  357000,362000,367000,372000,377000,359000,364000,369000,374000,379000,

  361000,366000,371000,376000,381000,363000,368000,373000,378000,383000,
  365000,370000,375000,380000,385000,372000,377000,382000,387000,392000,

  374000,379000,384000,389000,394000,376000,381000,386000,391000,396000,
  378000,383000,388000,393000,398000,380000,385000,390000,395000,400000,

  387000,392000,397000,402000,407000,389000,394000,399000,404000,409000,
  391000,396000,401000,406000,411000,393000,398000,403000,408000,413000,

  395000,400000,405000,410000,415000,402000,407000,412000,417000,422000,
  404000,409000,414000,419000,424000,406000,411000,416000,421000,426000,

  408000,413000,418000,423000,428000,410000,415000,420000,425000,430000,
  417000,422000,427000,432000,437000,419000,424000,429000,434000,439000,

  421000,426000,431000,436000,441000,423000,428000,433000,438000,443000,
  425000,430000,435000,440000,445000,432000,437000,442000,447000,452000,

  434000,439000,444000,449000,454000,436000,441000,446000,451000,456000,
  438000,443000,448000,453000,458000,440000,445000,450000,455000,460000,

  447000,452000,457000,462000,467000,449000,454000,459000,464000,469000,
  451000,456000,461000,466000,471000,453000,458000,463000,468000,473000,

  455000,460000,465000,470000,475000,462000,467000,472000,477000,482000,
  464000,469000,474000,479000,484000,466000,471000,476000,481000,486000,

  468000,473000,478000,483000,488000,470000,475000,480000,485000,490000,
  477000,482000,487000,492000,497000,479000,484000,489000,494000,499000,

  481000,486000,491000,496000,501000,483000,488000,493000,498000,503000,
  485000,490000,495000,500000,505000,492000,497000,502000,507000,512000,

  494000,499000,504000,509000,514000,496000,501000,506000,511000,516000,
  498000,503000,508000,513000,518000,500000,505000,510000,515000,520000]



# organize the data 
data = pd.DataFrame(
    {
        'Area' : build_area,
        'Build age' : build_age,
        'Build room' :build_room,
        'Price' : build_price
    }
)

#  You can try the output of the organized data here.
#area = data[['Area']]
#age = data[['Build age']]
#room = data[['Build room']]
#price = data[['Price']]


x_ori = data[['Area' , 'Build age' , 'Build room']]
y_ori = data[['Price']]

#Here, I test the model to check if it works properly. You can remove this step and allow the model to process the entire dataset without splitting it.
x_train , x_test , y_train , y_test = train_test_split( 
    x_ori , y_ori , test_size=0.2 , random_state= 42
)
# Get the input from user.
print("Provide detailed information about the building, keeping in mind that the building will be considered as located in Abdoun, Amman, Jordan..")
area_input = [int(input("Add the size of the building in m^2: "))]
age_input = [int(input("Add the age of the building: "))]
room_input = [int(input("Add how many rooms in the building: "))]

pred_data = pd.DataFrame(
    {
        'Area' : area_input,
        'Build age' : age_input,
        'Build room' : room_input
    }
)
pred_x1 = pred_data[['Area']]

model = LinearRegression()
model.fit(x_train , y_train)



y_pred = model.predict(pred_data)


# Here is a graph to see the linear relationship.

#plt.scatter(x_train , y_train , color = 'blue' , label = 'train data')
#plt.scatter(x_test , y_test , color = 'red'  , label = 'test data')
#x_line = np.linspace(50 , 220 , 100).reshape(-1,1)
#y_line = model.predict(x_line)
#plt.plot(x_line, y_line , color = 'red' , label = 'line')
#plt.show()


#y_pred_test = model.predict(x_test)

#We are using mean_sq_error to evaluate the average of squared differences between predicted and true values.
#mean_sq_error = mean_squared_error(y_test , y_pred_test)
#rmse = mean_sq_error ** 0.5                        

#We are using r2 here to tells you the proportion of the variance in the dependent variable accounted for by the model.
#r2 = r2_score(y_test, y_pred_test)                      

# Here we are using mean_absolute_error to evaluate the average of absolute differences between predicted and true values.
#mean_abs = mean_absolute_error(y_test , y_pred_test)


#print(mean_abs)
#print(rmse)
#print(r2)

#Here to print it and make it easier to read.
y_pred_int = int(y_pred)
y_pred_number = f"{y_pred_int:,}"

print("The expected price in JD is :",y_pred_number,"JD")

#These prints are for testing.
#print(y_pred)
#print(x_test)
#print(y_test)